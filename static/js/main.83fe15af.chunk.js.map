{"version":3,"sources":["components/mobileinput/mobileInput.jsx","components/verify/verify.jsx","App.js","serviceWorker.js","index.js"],"names":["Mobile","onRouteChange","className","action","id","autocomplete","type","name","placeholder","maxlength","title","required","onClick","value","Verify","App","otp","prompt","Number","alert","setState","route","state","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAkCeA,G,MAhCA,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAH,OACb,yBAAKC,UAAU,WACb,qDACA,wFAEA,0BAAMA,UAAU,gBACd,6BAASA,UAAU,mEACjB,0BAAMC,OAAO,GAAGC,GAAG,YAAYC,aAAa,OAC1C,2BACEH,UAAU,uCACVI,KAAK,MACLC,KAAK,WACLC,YAAY,kCACZC,UAAU,KACVC,MAAM,kBACNC,UAAQ,IACP,IACH,6BACA,yBAAKT,UAAU,OACb,2BACEU,QAASX,EACTC,UAAU,kFACVI,KAAK,SACLO,MAAM,oBCbLC,EAVA,kBACb,yBAAKZ,UAAU,WAEjB,6DCsCea,E,kDArCb,aAAe,IAAD,8BACZ,gBAMJd,cAAgB,WACf,IAAIe,EAAMC,OAAO,iBAEjB,GAAoB,OAAhBC,OAAOF,GAGR,OAAOG,MAAM,4BAFf,EAAKC,SAAS,CAACC,MAAM,UATnB,EAAKC,MAAQ,CACXD,MAAO,UAHG,E,qDAmBZ,OACE,yBAAKnB,UAAU,MAKS,WAArBqB,KAAKD,MAAMD,MACV,kBAAC,EAAD,CAAQpB,cAAgBsB,KAAKtB,gBAE7B,6BACE,kBAAC,EAAD,Y,GA9BMuB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.83fe15af.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Mobile = ({ onRouteChange }) => (\r\n  <div className=\" tc pa2\">\r\n    <h1> DEFAULT OTP IS 1234 </h1>\r\n    <h1> IF YOU ENTER 1234 IT WILL SHOW REGISTRATION SUCESSFULL </h1>\r\n\r\n    <main className=\"pa5 white-60\">\r\n      <article className=\"br3  ba shadow-5 b--white-10 mv4 w-100 w-50-m w-25-l mw5 center\">\r\n        <form action=\"\" id=\"cusCreate\" autocomplete=\"off\">\r\n          <input\r\n            className=\"pa3 ba b--green bg-lightest-blue tc \"\r\n            type=\"tel\"\r\n            name=\"telphone\"\r\n            placeholder=\"Please Enter Your Mobile Number\"\r\n            maxlength=\"10\"\r\n            title=\"Ten digits code\"\r\n            required\r\n          />{\" \"}\r\n          <br></br>\r\n          <div className=\"pa2\">\r\n            <input\r\n              onClick={onRouteChange}\r\n              className=\"b ph3 pv2 input-reset ba b--black  bg-transparent grow pointer f6 dib black pa2\"\r\n              type=\"submit\"\r\n              value=\"Send OTP\"\r\n            />\r\n          </div>\r\n        </form>\r\n      </article>\r\n    </main>\r\n  </div>\r\n);\r\n\r\nexport default Mobile;\r\n","import React from \"react\";\r\n\r\nconst Verify = () => (\r\n  <div className=\" tc pa2\">\r\n\r\n<h3> OTP REGISTRATION SUCESSFUL</h3>\r\n\r\n\r\n  </div>\r\n \r\n);\r\n\r\nexport default Verify;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Mobile from \"./components/mobileinput/mobileInput\";\nimport Verify from \"./components/verify/verify\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      route: \"signin\",\n    };\n  }\n\nonRouteChange = () => {\n let otp = prompt(\"Enter the OTP\")\n\n if (Number(otp) === 1234) {\n  this.setState({route:'home'})\n  } else {\n    return alert(\"Please Enter Correct Otp\")\n  }\n}\n\n\n  render() {\n    return (\n      <div className='tc'>\n\n     \n\n\n        {this.state.route === \"signin\" ? (\n          <Mobile onRouteChange ={this.onRouteChange} />\n        ) : (\n          <div>\n            <Verify />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}